apiVersion: apps/v1
kind: Deployment
metadata:
  name: js-app-v2
spec:
  replicas: 2
  minReadySeconds: 3
  selector:
    matchLabels:
      app: js-app-v2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 50%
  template:
    metadata:
      labels:
        app: js-app-v2
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '3000'
        prometheus.io/path: '/metrics'
        prometheus.io/scheme: 'http'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - js-app-v2
                topologyKey: kubernetes.io/hostname
      imagePullSecrets:
        - name: nexus-registry
      terminationGracePeriodSeconds: 10
      containers:
        - name: js-app-v2
          image: radut/js-app:v2
          imagePullPolicy: Always
          env:
          - name: SOME_KEY
            value: "some-value"
#          - name: SPECIAL_LEVEL_KEY
#            valueFrom:
#              configMapKeyRef:
#                # The ConfigMap containing the value you want to assign to SPECIAL_LEVEL_KEY
#                name: special-config
#                # Specify the key associated with the value
#                key: special.how
          ports:
          - containerPort: 3000
          resources:
            limits:
              cpu: "50m"
              memory: 100Mi
            requests:
              cpu: 50m
              memory: 50Mi
          readinessProbe:
            httpGet:
              path: /ready
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 3
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /live
              port: 3000
              httpHeaders:
              - name: X-Custom-Header
                value: Awesome
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3

#          readinessProbe:
#            tcpSocket:
#              port: 8080
#            initialDelaySeconds: 5
#            periodSeconds: 10
#          livenessProbe:
#            tcpSocket:
#              port: 8080
#            initialDelaySeconds: 15
#            periodSeconds: 20
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: js-app-v2-pdb
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: js-app-v2
---
#apiVersion: policy/v1beta1
#kind: PodDisruptionBudget
#metadata:
#  name: js-app-v2-pdb
#spec:
#  maxUnavailable: 1
#  selector:
#    matchLabels:
#      app: js-app
---
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: js-app-v2
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: js-app-v2
  minReplicas: 1
  maxReplicas: 10
  metrics:
#    - type: Pods
#      pods:
#        metric:
#          name: packets-per-second
#        target:
#          type: Value
#          averageValue: 10
    - type: Object
      object:
        metric:
          name: requests-per-second
        describedObject:
          apiVersion: networking.k8s.io/v1beta1
          kind: Ingress
          name: js-app-v2
        target:
          type: Value
          value: 10
    - type: External
      external:
        metric:
          name: queue_messages_ready
          selector:
            matchLabels:
              queue: worker_tasks
        target:
          type: AverageValue
          averageValue: 30

## Service

### NodePort TCP with port spec
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: js-app-v2
#  name: js-app-v2
#spec:
#  selector:
#    app: js-app-v2
##  sessionAffinity: None
#  sessionAffinity: ClientIP
#  type: NodePort
#  ports:
#    - port: 80
#      targetPort: 3000
#      nodePort: 32100
#      protocol: TCP


### NodePort TCP without port spec
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: js-app-v2
#  name: js-app-v2
#spec:
#  selector:
#    app: js-app-v2
#  #  sessionAffinity: None
#  sessionAffinity: ClientIP
#  type: NodePort
#  ports:
#  - port: 80
#    targetPort: 3000
#    protocol: TCP


### ClusterIP
#---
#apiVersion: v1
#kind: Service
#metadata:
#  labels:
#    app: js-app-v2
#  name: js-app-v2
#spec:
#  #  clusterIP: 10.233.25.145
#  selector:
#    app: js-app-v2
#  #  sessionAffinity: None
#  sessionAffinity: ClientIP
#  type: ClusterIP
#  ports:
#  - name: http
#    port: 80
#    targetPort: 3000
#    protocol: TCP



## LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: js-app-v2
  name: js-app-v2
spec:
  selector:
    app: js-app-v2
  #  sessionAffinity: None
  sessionAffinity: ClientIP
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    protocol: TCP
